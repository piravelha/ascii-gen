use std::{
  env,
  io::{stdout, Write},
};

#[derive(Clone, Copy, Debug)]
struct Color {
  red: u8,
  green: u8,
  blue: u8,
}

impl Color {
  fn new(red: u8, green: u8, blue: u8) -> Self {
    Self { red, green, blue }
  }

  fn colors() -> Vec<Self> {
    vec![
      Self::new(255, 0, 0),
      Self::new(0, 255, 0),
      Self::new(0, 0, 255),
      Self::new(255, 255, 0),
      Self::new(0, 255, 255),
      Self::new(255, 0, 255),
      
      Self::new(128, 0, 0),
      Self::new(0, 128, 0),
      Self::new(0, 0, 128),
      Self::new(128, 128, 0),
      Self::new(0, 128, 128),
      Self::new(128, 0, 128),
      
      Self::new(0, 0, 0),
      Self::new(255, 255, 255),
    ]
  }

  fn distance(&self, other: Color) -> f64 {
    let r1 = self.red as f64;
    let g1 = self.green as f64;
    let b1 = self.blue as f64;
    let r2 = other.red as f64;
    let g2 = other.green as f64;
    let b2 = other.blue as f64;
    let r = (r1 - r2).powi(2);
    let g = (g1 - g2).powi(2);
    let b = (b1 - b2).powi(2);
    (r + g + b).sqrt()
  }
}

#[derive(Clone, Copy, Debug)]
struct Cell {
  char: char,
  fg: Color,
  bg: Color,
}

impl Cell {
  fn new(char: char, fg: Color, bg: Color) -> Self {
    Self { char, fg, bg }
  }

  fn from_color(color: Color) -> Self {
    let s = ".,:;/!]?1SS@@";
    let chars = s.chars().collect::<Vec<_>>();
    let colors = Color::colors();
    let mut closest = Color::new(0, 0, 0);
    let mut cell = Cell::new(' ', closest, closest);

    for c1 in colors.clone().into_iter() {
      for c2 in colors.clone().into_iter() {
        for i in 0..chars.len() * 2 {
          let n = if i >= chars.len() {
            chars.len() * 2 - i - 1
          } else {
            i
          };
          let d = (n as f64) / chars.len() as f64;
          let x = (d / 2.0);
          let y = (1.0 - d) + 0.85; // !!
          
          /*let x: f64;
          let y: f64;

          let wx = 1.0;
          let wy = 1.0;
 
          if i >= chars.len() {
            let n = chars.len() * 2 - i - 1;
            let d = n as f64 / chars.len() as f64;
            x = d;
            y = 1.0 - d;
          } else {
            let d = i as f64 / chars.len() as f64;
            x = d;
            y = 1.0 - d;
          }
*/
          let r = c1.red as f64 * x + c2.red as f64 * y;
          let g = c1.green as f64 * x + c2.green as f64 * y;
          let b = c1.blue as f64 * x + c2.blue as f64 * y;
          let c = Color::new((r) as u8, (g) as u8, (b) as u8);
          let d = color.distance(closest);
          if color.distance(c) < d {
            closest = c;
            cell.char = *chars.get(n).unwrap();
            if i >= chars.len() {
              (cell.fg, cell.bg) = (c2, c1);
            } else {
              cell.fg = c1;
              cell.bg = c2;
            }
          }
        }
      }
    }

    cell
  }

  fn render(&self) -> String {
    format!(
      "\x1b[38;2;{};{};{}m\x1b[48;2;{};{};{}m{}{}\x1b[0m",
      self.fg.red, self.fg.green, self.fg.blue, self.bg.red, self.bg.green, self.bg.blue, self.char, self.char,
    )
  }
}

struct Canvas {
  cells: Vec<Vec<Cell>>,
}

impl Canvas {
  fn height(&self) -> usize {
    self.cells.len()
  }

  fn width(&self) -> usize {
    self.cells.get(0)
      .map(|v| v.len())
      .unwrap_or(0)
  }

  fn display(&self) {
    for y in 0..self.height() {
      for x in 0..self.width() {
        print!("{}", self.cells[y][x].render());
      }
      println!();
    }
  }

  fn new(width: usize, height: usize) -> Self {
    let cell = Cell::from_color(Color::new(0, 0, 0));
    Self {
      cells: vec![vec![cell; width]; height],
    }
  }

  fn draw_rectangle(&mut self, rect: Rectangle, cell: Cell) {
    for y in rect.position.y as usize..(rect.position.y + rect.size.y) as usize {
      if y > self.height() {
        break;
      }
      for x in rect.position.x as usize..(rect.position.x + rect.size.x) as usize {
        if x > self.width() {
          break;
        }
        self.cells[y][x] = cell;
      }
    }
  }
}

struct Vector2 {
  x: f64,
  y: f64,
}

impl Vector2 {
  fn new(x: f64, y: f64) -> Self {
    Self { x, y }
  }
}

struct Rectangle {
  position: Vector2,
  size: Vector2,
}

impl Rectangle {
  fn new(position: Vector2, size: Vector2) -> Self {
    Self { position, size }
  }

  fn raw(x: f64, y: f64, width: f64, height: f64) -> Self {
    Self::new(Vector2::new(x, y), Vector2::new(width, height))
  }
}

fn main() {
  let mut canvas = Canvas::new(40, 40);
  for i in 0..canvas.height() {
    for j in 0..canvas.width() {
      let cell = Cell::from_color(Color::new(
        6 * j as u8,
        6 * i as u8,
        0,
      ));
      canvas.cells[i][j] = cell;
    }
  }
  canvas.display();
}
